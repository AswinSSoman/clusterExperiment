% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllHelperFilter.R, R/makeFilterStats.R
\docType{methods}
\name{filterNames,SummarizedExperiment-method}
\alias{filterNames,SummarizedExperiment-method}
\alias{filterNames}
\alias{filterStats,SummarizedExperiment,character-method}
\alias{filterStats}
\alias{filterStats,SummarizedExperiment,missing-method}
\alias{filterStats<-,SummarizedExperiment-method}
\alias{filterStats<-}
\alias{makeFilterStats}
\alias{makeFilterStats,SummarizedExperiment-method}
\alias{makeFilterStats,matrix-method}
\alias{makeFilterStats,ClusterExperiment-method}
\alias{listBuiltInFilterStats}
\alias{filterData,SingleCellExperiment-method}
\alias{filterData}
\title{Calculate filtering statistics}
\usage{
\S4method{filterNames}{SummarizedExperiment}(object, checkValid = FALSE)

\S4method{filterStats}{SummarizedExperiment,character}(object, type,
  checkValid = FALSE)

\S4method{filterStats}{SummarizedExperiment,missing}(object, type,
  checkValid = FALSE)

\S4method{filterStats}{SummarizedExperiment}(object, type, ...) <- value

\S4method{makeFilterStats}{SummarizedExperiment}(object,
  filterStats = listBuiltInFilterStats(), transFun = NULL,
  isCount = FALSE)

\S4method{makeFilterStats}{matrix}(object, ...)

\S4method{makeFilterStats}{ClusterExperiment}(object,
  whichClusterIgnoreUnassigned = NULL,
  filterStats = listBuiltInFilterStats(), ...)

listBuiltInFilterStats()

\S4method{filterData}{SingleCellExperiment}(object, type, cutoff, percentile,
  absolute = FALSE, keepLarge = TRUE)
}
\arguments{
\item{object}{A SummarizedExperiment object}

\item{type}{a type of filter to retrieve. Should match the filter name.}

\item{...}{Values passed on the the 'SummarizedExperiment' method.}

\item{filterStats}{character vector of statistics to calculate. 
Must be one of the character values given by \code{listBuildInFilterStats()}.}

\item{transFun}{a transformation function to be applied to the data. If the transformation 
applied to the data creates an error or NA values, then the function will throw an error.
If object is of class \code{ClusterExperiment}, the stored transformation will be used 
and giving this parameter will result in an error.}

\item{isCount}{if \code{transFun=NULL}, then \code{isCount=TRUE} will determine the
will give a transformation function \code{function(x){x}}. Ignored if \code{transFun=NULL}.
If object is of class \code{ClusterExperiment}, the stored transformation will be used 
and giving this parameter will result in an error.}

\item{whichClusterIgnoreUnassigned}{indicates clustering that should be used to filter out unassigned samples from the calculations. If \code{NULL} no filtering of samples will be done. See details for more information.}

\item{cutoff}{numeric. A value at which to filter the rows (genes) for the test statistic}

\item{percentile}{numeric. Either a number between 0,1 indicating what percentage of the rows (genes) to keep or an integer value indicated the number of rows (genes) to keep}

\item{absolute}{whether to take the absolute value of the filter statistic}

\item{keepLarge}{logical whether to keep rows (genes) with large values of the test statistic or small values of the test statistic.}

\item{object}{object from which user wants to calculate per-row statistics}

\item{type}{The type of filtering statistic to use to filter.}
}
\value{
A SingleCellExperiment object with the rows (genes) removed based on filters
}
\description{
Function for calculating, per row (gene), built-in statistical 
   functions that might be used for filtering.
}
\details{
Note that the replacement functions never actually completely
  replace the slot \code{filterStats} unless the replacement value is NULL
  They update existing filters of the
  same name and add filters with new names to the existing filters.

\code{whichClusterIgnoreUnassigned} is only an option when applied to a
\code{ClusterExperiment} classs and indicates that the filtering statistics should be
calculated based on samples that are unassigned by the
 designated clustering. The name given to the filter in this case is of the form
 \code{<filterStats>_<clusterLabel>}, i.e. the clustering label of the clustering is
 appended to the standard name for the filtering statistic.

Note that \code{filterData} returns a SingleCellExperiment object. To get the actual data out use either assay or \code{\link{transformData}} if transformed data is desired.
}
\examples{
data(simData)
listBuiltInFilterStats()
scf<-makeFilterStats(simData,filterStats=c("var","mad"))
scf
scfFiltered<-filterData(scf,type="mad",percentile=10)
scfFiltered
assay(scfFiltered)[1:10,1:10]
}
